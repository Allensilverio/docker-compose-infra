---
- name: Install Docker and run Docker container
  hosts: qa
  become: yes
  tasks:
    - name: Check if Docker is installed
      command: docker --version
      ignore_errors: yes
      register: docker_check

    - name: Install Docker and its dependencies if not installed
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      when: docker_check.rc != 0
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: docker_check.rc != 0

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
      when: docker_check.rc != 0

    - name: Update apt package cache
      apt:
        update_cache: yes
      when: docker_check.rc != 0

    - name: Install Docker CE
      apt:
        name: docker-ce
        state: present
      when: docker_check.rc != 0

    - name: Start Docker service
      service:
        name: docker
        state: started

    - name: Ensure /var/app/ directory exists
      file:
        path: /var/app/
        state: directory
        mode: '0755'

    - name: Generate .env file on the server
      template:
        src: "./.env.j2"
        dest: "/var/app/.env"
      become: true

    - name: Determine platform based on architecture
      set_fact:
        platform_type: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"

    - name: Pull a Docker image from DockerHub based on architecture
      community.docker.docker_image:
        name: "{{docker_username}}/{{docker_image_name}}"
        source: pull
        pull:
          platform: "{{ platform_type }}"

    - name: Run Docker container
      docker_container:
        name: "{{ docker_container_name }}"
        image: "{{docker_username}}/{{ docker_image_name }}"
        state: started
        restart_policy: always
        env_file: /var/app/.env
        ports:
          - "3000:3000"
